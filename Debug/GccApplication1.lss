
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000062c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005b8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800100  00800100  0000062c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000062c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000065c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  0000069c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c7f  00000000  00000000  0000079c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000942  00000000  00000000  0000141b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000079d  00000000  00000000  00001d5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000230  00000000  00000000  000024fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004e0  00000000  00000000  0000272c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002e6  00000000  00000000  00002c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00002ef2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 df 00 	jmp	0x1be	; 0x1be <__vector_1>
   8:	0c 94 0b 01 	jmp	0x216	; 0x216 <__vector_2>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ab 30       	cpi	r26, 0x0B	; 11
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 a4 00 	call	0x148	; 0x148 <main>
  88:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <init_ADC>:
 */ 
#include "ADC.h"

void init_ADC(void)
{
	ADMUX |= (1 << REFS0);  // Set reference to AVCC
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	80 64       	ori	r24, 0x40	; 64
  98:	80 83       	st	Z, r24
	ADMUX &= ~(1 << REFS1); // Clear REFS1 bit
  9a:	80 81       	ld	r24, Z
  9c:	8f 77       	andi	r24, 0x7F	; 127
  9e:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);  // Enable the ADC
  a0:	ea e7       	ldi	r30, 0x7A	; 122
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 81       	ld	r24, Z
  a6:	80 68       	ori	r24, 0x80	; 128
  a8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2); // Set prescaler to 128
  aa:	80 81       	ld	r24, Z
  ac:	87 60       	ori	r24, 0x07	; 7
  ae:	80 83       	st	Z, r24
  b0:	08 95       	ret

000000b2 <ADC_read>:
}

uint16_t ADC_read(uint8_t channel)
{
	ADMUX = (ADMUX & 0xF0) | (channel & 0x0F); // Clear older channel, set new channel
  b2:	ec e7       	ldi	r30, 0x7C	; 124
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	90 81       	ld	r25, Z
  b8:	90 7f       	andi	r25, 0xF0	; 240
  ba:	8f 70       	andi	r24, 0x0F	; 15
  bc:	89 2b       	or	r24, r25
  be:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);  // Start new conversion
  c0:	ea e7       	ldi	r30, 0x7A	; 122
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	80 64       	ori	r24, 0x40	; 64
  c8:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC)); // Wait until conversion ends
  ca:	80 81       	ld	r24, Z
  cc:	86 fd       	sbrc	r24, 6
  ce:	fd cf       	rjmp	.-6      	; 0xca <ADC_read+0x18>
	return ADCW;  // Return the 10-bit ADC value
  d0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
  d4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
  d8:	08 95       	ret

000000da <init_ExternalInterrupts>:
#include "ext_interrupt.h"

void init_ExternalInterrupts(void)
{
	// Configure INT0 and INT1 for both rising and falling edges
	EICRA |= (1 << ISC00) | (1 << ISC10);  // INT0 and INT1 trigger on any change
  da:	e9 e6       	ldi	r30, 0x69	; 105
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	85 60       	ori	r24, 0x05	; 5
  e2:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0) | (1 << INT1);    // Enable INT0 and INT1 interrupts
  e4:	8d b3       	in	r24, 0x1d	; 29
  e6:	83 60       	ori	r24, 0x03	; 3
  e8:	8d bb       	out	0x1d, r24	; 29
  ea:	08 95       	ret

000000ec <init_GPIO>:
 */ 
#include "GPIO.h"

void init_GPIO(void)
{
	DDRD |= (1 << DDD0) | (1 << DDD1) | (1 << DDD6); // Set pins PD0, PD1, and PD6 as output
  ec:	8a b1       	in	r24, 0x0a	; 10
  ee:	83 64       	ori	r24, 0x43	; 67
  f0:	8a b9       	out	0x0a, r24	; 10
	DDRC &= ~(1 << DDC0); // Set pin PC0 as input (ADC channel 0)
  f2:	38 98       	cbi	0x07, 0	; 7

	// Configure encoder pins as inputs
	DDRD &= ~((1 << DDD2) | (1 << DDD3)); // Assuming A and B channels are on PD2 and PD3
  f4:	8a b1       	in	r24, 0x0a	; 10
  f6:	83 7f       	andi	r24, 0xF3	; 243
  f8:	8a b9       	out	0x0a, r24	; 10

	// Set SS pin as output
	DDRB |= (1 << DDB2);  // Ensure SS pin is set as output
  fa:	22 9a       	sbi	0x04, 2	; 4
	PORTB |= (1 << PORTB2); // Set SS pin high (deselect slave)
  fc:	2a 9a       	sbi	0x05, 2	; 5
  fe:	08 95       	ret

00000100 <setMotorSpeed>:
}

void setMotorSpeed(uint8_t dutyCycle)
{
	PORTD |= (1 << PORTD0);  // Set pin PD0 high (motor forward direction)
 100:	58 9a       	sbi	0x0b, 0	; 11
	PORTD &= ~(1 << PORTD1); // Set pin PD1 low
 102:	59 98       	cbi	0x0b, 1	; 11
	OCR0A = dutyCycle;  // Set PWM duty cycle to control motor speed
 104:	87 bd       	out	0x27, r24	; 39
 106:	08 95       	ret

00000108 <update_encoder_count>:

#define PPR 24  // Pulses per revolution, replace with your encoder's PPR

void update_encoder_count(uint8_t currentA, uint8_t currentB)
{
	if (currentA != lastA) {
 108:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <lastA>
 10c:	98 17       	cp	r25, r24
 10e:	b9 f0       	breq	.+46     	; 0x13e <update_encoder_count+0x36>
		if (currentB != currentA) {
 110:	86 17       	cp	r24, r22
 112:	59 f0       	breq	.+22     	; 0x12a <update_encoder_count+0x22>
			pulse_count++;  // Clockwise
 114:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <pulse_count>
 118:	30 91 0a 01 	lds	r19, 0x010A	; 0x80010a <pulse_count+0x1>
 11c:	2f 5f       	subi	r18, 0xFF	; 255
 11e:	3f 4f       	sbci	r19, 0xFF	; 255
 120:	30 93 0a 01 	sts	0x010A, r19	; 0x80010a <pulse_count+0x1>
 124:	20 93 09 01 	sts	0x0109, r18	; 0x800109 <pulse_count>
 128:	0a c0       	rjmp	.+20     	; 0x13e <update_encoder_count+0x36>
			} else {
			pulse_count--;  // Counterclockwise
 12a:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <pulse_count>
 12e:	30 91 0a 01 	lds	r19, 0x010A	; 0x80010a <pulse_count+0x1>
 132:	21 50       	subi	r18, 0x01	; 1
 134:	31 09       	sbc	r19, r1
 136:	30 93 0a 01 	sts	0x010A, r19	; 0x80010a <pulse_count+0x1>
 13a:	20 93 09 01 	sts	0x0109, r18	; 0x800109 <pulse_count>
		}
	}
	lastA = currentA;
 13e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <lastA>
	lastB = currentB;
 142:	60 93 07 01 	sts	0x0107, r22	; 0x800107 <lastB>
 146:	08 95       	ret

00000148 <main>:
}

int main(void)
{
	init_GPIO();
 148:	0e 94 76 00 	call	0xec	; 0xec <init_GPIO>
	init_ADC();
 14c:	0e 94 48 00 	call	0x90	; 0x90 <init_ADC>
	init_PWM();
 150:	0e 94 8d 01 	call	0x31a	; 0x31a <init_PWM>
	init_ExternalInterrupts();
 154:	0e 94 6d 00 	call	0xda	; 0xda <init_ExternalInterrupts>
	init_Timer1();
 158:	0e 94 97 01 	call	0x32e	; 0x32e <init_Timer1>
	init_SPI();
 15c:	0e 94 80 01 	call	0x300	; 0x300 <init_SPI>

	sei();  // Enable global interrupts
 160:	78 94       	sei

	while (1)
	{
		adc_value = ADC_read(0);  // Read ADC value from channel 0 (potentiometer)
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	0e 94 59 00 	call	0xb2	; 0xb2 <ADC_read>
 168:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <adc_value+0x1>
 16c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <adc_value>

		// Only update PWM if ADC value has changed significantly
		if (abs(adc_value - last_adc_value) > 4) {
 170:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <last_adc_value>
 174:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <last_adc_value+0x1>
 178:	ac 01       	movw	r20, r24
 17a:	42 1b       	sub	r20, r18
 17c:	53 0b       	sbc	r21, r19
 17e:	9a 01       	movw	r18, r20
 180:	22 f4       	brpl	.+8      	; 0x18a <main+0x42>
 182:	22 27       	eor	r18, r18
 184:	33 27       	eor	r19, r19
 186:	24 1b       	sub	r18, r20
 188:	35 0b       	sbc	r19, r21
 18a:	25 30       	cpi	r18, 0x05	; 5
 18c:	31 05       	cpc	r19, r1
 18e:	84 f0       	brlt	.+32     	; 0x1b0 <main+0x68>
			dutyCycle = adc_value / 4;  // Scale 1023 to 255
 190:	96 95       	lsr	r25
 192:	87 95       	ror	r24
 194:	96 95       	lsr	r25
 196:	87 95       	ror	r24
 198:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <dutyCycle>
			setMotorSpeed(dutyCycle);   // Update motor speed
 19c:	0e 94 80 00 	call	0x100	; 0x100 <setMotorSpeed>
			last_adc_value = adc_value; // Store the last ADC value
 1a0:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <adc_value>
 1a4:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <adc_value+0x1>
 1a8:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <last_adc_value+0x1>
 1ac:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <last_adc_value>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b0:	8f e1       	ldi	r24, 0x1F	; 31
 1b2:	9e e4       	ldi	r25, 0x4E	; 78
 1b4:	01 97       	sbiw	r24, 0x01	; 1
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <main+0x6c>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <main+0x72>
 1ba:	00 00       	nop
 1bc:	d2 cf       	rjmp	.-92     	; 0x162 <main+0x1a>

000001be <__vector_1>:
		_delay_ms(10);
	}
}

ISR(INT0_vect)
{
 1be:	1f 92       	push	r1
 1c0:	0f 92       	push	r0
 1c2:	0f b6       	in	r0, 0x3f	; 63
 1c4:	0f 92       	push	r0
 1c6:	11 24       	eor	r1, r1
 1c8:	2f 93       	push	r18
 1ca:	3f 93       	push	r19
 1cc:	4f 93       	push	r20
 1ce:	5f 93       	push	r21
 1d0:	6f 93       	push	r22
 1d2:	7f 93       	push	r23
 1d4:	8f 93       	push	r24
 1d6:	9f 93       	push	r25
 1d8:	af 93       	push	r26
 1da:	bf 93       	push	r27
 1dc:	ef 93       	push	r30
 1de:	ff 93       	push	r31
	uint8_t currentA = (PIND & (1 << PIND2)) >> PIND2;  // Read the state of A channel
 1e0:	89 b1       	in	r24, 0x09	; 9
	uint8_t currentB = (PIND & (1 << PIND3)) >> PIND3;  // Read the state of B channel
 1e2:	69 b1       	in	r22, 0x09	; 9
	update_encoder_count(currentA, currentB);
 1e4:	63 fb       	bst	r22, 3
 1e6:	66 27       	eor	r22, r22
 1e8:	60 f9       	bld	r22, 0
 1ea:	82 fb       	bst	r24, 2
 1ec:	88 27       	eor	r24, r24
 1ee:	80 f9       	bld	r24, 0
 1f0:	0e 94 84 00 	call	0x108	; 0x108 <update_encoder_count>
}
 1f4:	ff 91       	pop	r31
 1f6:	ef 91       	pop	r30
 1f8:	bf 91       	pop	r27
 1fa:	af 91       	pop	r26
 1fc:	9f 91       	pop	r25
 1fe:	8f 91       	pop	r24
 200:	7f 91       	pop	r23
 202:	6f 91       	pop	r22
 204:	5f 91       	pop	r21
 206:	4f 91       	pop	r20
 208:	3f 91       	pop	r19
 20a:	2f 91       	pop	r18
 20c:	0f 90       	pop	r0
 20e:	0f be       	out	0x3f, r0	; 63
 210:	0f 90       	pop	r0
 212:	1f 90       	pop	r1
 214:	18 95       	reti

00000216 <__vector_2>:

ISR(INT1_vect)
{
 216:	1f 92       	push	r1
 218:	0f 92       	push	r0
 21a:	0f b6       	in	r0, 0x3f	; 63
 21c:	0f 92       	push	r0
 21e:	11 24       	eor	r1, r1
 220:	2f 93       	push	r18
 222:	3f 93       	push	r19
 224:	4f 93       	push	r20
 226:	5f 93       	push	r21
 228:	6f 93       	push	r22
 22a:	7f 93       	push	r23
 22c:	8f 93       	push	r24
 22e:	9f 93       	push	r25
 230:	af 93       	push	r26
 232:	bf 93       	push	r27
 234:	ef 93       	push	r30
 236:	ff 93       	push	r31
	uint8_t currentA = (PIND & (1 << PIND2)) >> PIND2;  // Read the state of A channel
 238:	89 b1       	in	r24, 0x09	; 9
	uint8_t currentB = (PIND & (1 << PIND3)) >> PIND3;  // Read the state of B channel
 23a:	69 b1       	in	r22, 0x09	; 9
	update_encoder_count(currentA, currentB);
 23c:	63 fb       	bst	r22, 3
 23e:	66 27       	eor	r22, r22
 240:	60 f9       	bld	r22, 0
 242:	82 fb       	bst	r24, 2
 244:	88 27       	eor	r24, r24
 246:	80 f9       	bld	r24, 0
 248:	0e 94 84 00 	call	0x108	; 0x108 <update_encoder_count>
}
 24c:	ff 91       	pop	r31
 24e:	ef 91       	pop	r30
 250:	bf 91       	pop	r27
 252:	af 91       	pop	r26
 254:	9f 91       	pop	r25
 256:	8f 91       	pop	r24
 258:	7f 91       	pop	r23
 25a:	6f 91       	pop	r22
 25c:	5f 91       	pop	r21
 25e:	4f 91       	pop	r20
 260:	3f 91       	pop	r19
 262:	2f 91       	pop	r18
 264:	0f 90       	pop	r0
 266:	0f be       	out	0x3f, r0	; 63
 268:	0f 90       	pop	r0
 26a:	1f 90       	pop	r1
 26c:	18 95       	reti

0000026e <__vector_11>:

ISR(TIMER1_COMPA_vect)
{
 26e:	1f 92       	push	r1
 270:	0f 92       	push	r0
 272:	0f b6       	in	r0, 0x3f	; 63
 274:	0f 92       	push	r0
 276:	11 24       	eor	r1, r1
 278:	2f 93       	push	r18
 27a:	3f 93       	push	r19
 27c:	4f 93       	push	r20
 27e:	5f 93       	push	r21
 280:	6f 93       	push	r22
 282:	7f 93       	push	r23
 284:	8f 93       	push	r24
 286:	9f 93       	push	r25
 288:	af 93       	push	r26
 28a:	bf 93       	push	r27
 28c:	ef 93       	push	r30
 28e:	ff 93       	push	r31
	rpm = (pulse_count * 60) / (PPR*6.5);  // Calculate RPM
 290:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <pulse_count>
 294:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <pulse_count+0x1>
 298:	2c e3       	ldi	r18, 0x3C	; 60
 29a:	28 9f       	mul	r18, r24
 29c:	b0 01       	movw	r22, r0
 29e:	29 9f       	mul	r18, r25
 2a0:	70 0d       	add	r23, r0
 2a2:	11 24       	eor	r1, r1
 2a4:	07 2e       	mov	r0, r23
 2a6:	00 0c       	add	r0, r0
 2a8:	88 0b       	sbc	r24, r24
 2aa:	99 0b       	sbc	r25, r25
 2ac:	0e 94 4e 02 	call	0x49c	; 0x49c <__floatsisf>
 2b0:	20 e0       	ldi	r18, 0x00	; 0
 2b2:	30 e0       	ldi	r19, 0x00	; 0
 2b4:	4c e1       	ldi	r20, 0x1C	; 28
 2b6:	53 e4       	ldi	r21, 0x43	; 67
 2b8:	0e 94 ab 01 	call	0x356	; 0x356 <__divsf3>
 2bc:	0e 94 1d 02 	call	0x43a	; 0x43a <__fixunssfsi>
 2c0:	87 2f       	mov	r24, r23
 2c2:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <_edata>
 2c6:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <_edata+0x1>
	pulse_count = 0;  // Reset pulse count for the next interval
 2ca:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <pulse_count+0x1>
 2ce:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <pulse_count>

	// Split the RPM into two bytes and send via SPI
	SPI_send((rpm >> 8) & 0xFF);  // Send the high byte
 2d2:	0e 94 86 01 	call	0x30c	; 0x30c <SPI_send>
	SPI_send(rpm & 0xFF);         // Send the low byte
 2d6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 2da:	0e 94 86 01 	call	0x30c	; 0x30c <SPI_send>
}
 2de:	ff 91       	pop	r31
 2e0:	ef 91       	pop	r30
 2e2:	bf 91       	pop	r27
 2e4:	af 91       	pop	r26
 2e6:	9f 91       	pop	r25
 2e8:	8f 91       	pop	r24
 2ea:	7f 91       	pop	r23
 2ec:	6f 91       	pop	r22
 2ee:	5f 91       	pop	r21
 2f0:	4f 91       	pop	r20
 2f2:	3f 91       	pop	r19
 2f4:	2f 91       	pop	r18
 2f6:	0f 90       	pop	r0
 2f8:	0f be       	out	0x3f, r0	; 63
 2fa:	0f 90       	pop	r0
 2fc:	1f 90       	pop	r1
 2fe:	18 95       	reti

00000300 <init_SPI>:
#include "spi.h"

void init_SPI(void)
{
	// Set MOSI, SCK, and SS as output, MISO as input
	DDRB = (1 << DDB3) | (1 << DDB5) | (1 << DDB2);
 300:	8c e2       	ldi	r24, 0x2C	; 44
 302:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << PORTB2); // Set SS high initially
 304:	2a 9a       	sbi	0x05, 2	; 5

	// Enable SPI, set as Master, and set clock rate fck/16
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR0);
 306:	81 e5       	ldi	r24, 0x51	; 81
 308:	8c bd       	out	0x2c, r24	; 44
 30a:	08 95       	ret

0000030c <SPI_send>:
}

void SPI_send(uint8_t data)
{
	PORTB &= ~(1 << PORTB2); // Assert SS (Select slave)
 30c:	2a 98       	cbi	0x05, 2	; 5
	SPDR = data;             // Start transmission
 30e:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1 << SPIF))); // Wait for transmission to complete
 310:	0d b4       	in	r0, 0x2d	; 45
 312:	07 fe       	sbrs	r0, 7
 314:	fd cf       	rjmp	.-6      	; 0x310 <SPI_send+0x4>
	PORTB |= (1 << PORTB2);  // Deassert SS (Deselect slave)
 316:	2a 9a       	sbi	0x05, 2	; 5
 318:	08 95       	ret

0000031a <init_PWM>:
#include "timer.h"


void init_PWM(void)
{
	DDRD |= (1 << DDD6); // Set PD6 as output (PWM)
 31a:	56 9a       	sbi	0x0a, 6	; 10
	TCCR0A |= (1 << COM0A1) | (1 << WGM00) | (1 << WGM01); // Fast PWM mode, non-inverted
 31c:	84 b5       	in	r24, 0x24	; 36
 31e:	83 68       	ori	r24, 0x83	; 131
 320:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS22); // Prescaler 64
 322:	85 b5       	in	r24, 0x25	; 37
 324:	84 60       	ori	r24, 0x04	; 4
 326:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0;
 328:	16 bc       	out	0x26, r1	; 38
	OCR0A = 0;  // Initialize PWM duty cycle to 0
 32a:	17 bc       	out	0x27, r1	; 39
 32c:	08 95       	ret

0000032e <init_Timer1>:
}

void init_Timer1(void)
{
	TCCR1B |= (1 << WGM12);  // Configure Timer1 in CTC mode
 32e:	e1 e8       	ldi	r30, 0x81	; 129
 330:	f0 e0       	ldi	r31, 0x00	; 0
 332:	80 81       	ld	r24, Z
 334:	88 60       	ori	r24, 0x08	; 8
 336:	80 83       	st	Z, r24
	OCR1A = 7812;  // Set compare value for 1-second interval
 338:	84 e8       	ldi	r24, 0x84	; 132
 33a:	9e e1       	ldi	r25, 0x1E	; 30
 33c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 340:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	TCCR1B |= (1 << CS12) | (1 << CS10);  // Prescaler 1024
 344:	80 81       	ld	r24, Z
 346:	85 60       	ori	r24, 0x05	; 5
 348:	80 83       	st	Z, r24
	TIMSK1 |= (1 << OCIE1A); // Enable Timer1 compare match interrupt
 34a:	ef e6       	ldi	r30, 0x6F	; 111
 34c:	f0 e0       	ldi	r31, 0x00	; 0
 34e:	80 81       	ld	r24, Z
 350:	82 60       	ori	r24, 0x02	; 2
 352:	80 83       	st	Z, r24
 354:	08 95       	ret

00000356 <__divsf3>:
 356:	0e 94 bf 01 	call	0x37e	; 0x37e <__divsf3x>
 35a:	0c 94 a0 02 	jmp	0x540	; 0x540 <__fp_round>
 35e:	0e 94 99 02 	call	0x532	; 0x532 <__fp_pscB>
 362:	58 f0       	brcs	.+22     	; 0x37a <__divsf3+0x24>
 364:	0e 94 92 02 	call	0x524	; 0x524 <__fp_pscA>
 368:	40 f0       	brcs	.+16     	; 0x37a <__divsf3+0x24>
 36a:	29 f4       	brne	.+10     	; 0x376 <__divsf3+0x20>
 36c:	5f 3f       	cpi	r21, 0xFF	; 255
 36e:	29 f0       	breq	.+10     	; 0x37a <__divsf3+0x24>
 370:	0c 94 89 02 	jmp	0x512	; 0x512 <__fp_inf>
 374:	51 11       	cpse	r21, r1
 376:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__fp_szero>
 37a:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__fp_nan>

0000037e <__divsf3x>:
 37e:	0e 94 b1 02 	call	0x562	; 0x562 <__fp_split3>
 382:	68 f3       	brcs	.-38     	; 0x35e <__divsf3+0x8>

00000384 <__divsf3_pse>:
 384:	99 23       	and	r25, r25
 386:	b1 f3       	breq	.-20     	; 0x374 <__divsf3+0x1e>
 388:	55 23       	and	r21, r21
 38a:	91 f3       	breq	.-28     	; 0x370 <__divsf3+0x1a>
 38c:	95 1b       	sub	r25, r21
 38e:	55 0b       	sbc	r21, r21
 390:	bb 27       	eor	r27, r27
 392:	aa 27       	eor	r26, r26
 394:	62 17       	cp	r22, r18
 396:	73 07       	cpc	r23, r19
 398:	84 07       	cpc	r24, r20
 39a:	38 f0       	brcs	.+14     	; 0x3aa <__divsf3_pse+0x26>
 39c:	9f 5f       	subi	r25, 0xFF	; 255
 39e:	5f 4f       	sbci	r21, 0xFF	; 255
 3a0:	22 0f       	add	r18, r18
 3a2:	33 1f       	adc	r19, r19
 3a4:	44 1f       	adc	r20, r20
 3a6:	aa 1f       	adc	r26, r26
 3a8:	a9 f3       	breq	.-22     	; 0x394 <__divsf3_pse+0x10>
 3aa:	35 d0       	rcall	.+106    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 3ac:	0e 2e       	mov	r0, r30
 3ae:	3a f0       	brmi	.+14     	; 0x3be <__divsf3_pse+0x3a>
 3b0:	e0 e8       	ldi	r30, 0x80	; 128
 3b2:	32 d0       	rcall	.+100    	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 3b4:	91 50       	subi	r25, 0x01	; 1
 3b6:	50 40       	sbci	r21, 0x00	; 0
 3b8:	e6 95       	lsr	r30
 3ba:	00 1c       	adc	r0, r0
 3bc:	ca f7       	brpl	.-14     	; 0x3b0 <__divsf3_pse+0x2c>
 3be:	2b d0       	rcall	.+86     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 3c0:	fe 2f       	mov	r31, r30
 3c2:	29 d0       	rcall	.+82     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 3c4:	66 0f       	add	r22, r22
 3c6:	77 1f       	adc	r23, r23
 3c8:	88 1f       	adc	r24, r24
 3ca:	bb 1f       	adc	r27, r27
 3cc:	26 17       	cp	r18, r22
 3ce:	37 07       	cpc	r19, r23
 3d0:	48 07       	cpc	r20, r24
 3d2:	ab 07       	cpc	r26, r27
 3d4:	b0 e8       	ldi	r27, 0x80	; 128
 3d6:	09 f0       	breq	.+2      	; 0x3da <__divsf3_pse+0x56>
 3d8:	bb 0b       	sbc	r27, r27
 3da:	80 2d       	mov	r24, r0
 3dc:	bf 01       	movw	r22, r30
 3de:	ff 27       	eor	r31, r31
 3e0:	93 58       	subi	r25, 0x83	; 131
 3e2:	5f 4f       	sbci	r21, 0xFF	; 255
 3e4:	3a f0       	brmi	.+14     	; 0x3f4 <__divsf3_pse+0x70>
 3e6:	9e 3f       	cpi	r25, 0xFE	; 254
 3e8:	51 05       	cpc	r21, r1
 3ea:	78 f0       	brcs	.+30     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 3ec:	0c 94 89 02 	jmp	0x512	; 0x512 <__fp_inf>
 3f0:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__fp_szero>
 3f4:	5f 3f       	cpi	r21, 0xFF	; 255
 3f6:	e4 f3       	brlt	.-8      	; 0x3f0 <__divsf3_pse+0x6c>
 3f8:	98 3e       	cpi	r25, 0xE8	; 232
 3fa:	d4 f3       	brlt	.-12     	; 0x3f0 <__divsf3_pse+0x6c>
 3fc:	86 95       	lsr	r24
 3fe:	77 95       	ror	r23
 400:	67 95       	ror	r22
 402:	b7 95       	ror	r27
 404:	f7 95       	ror	r31
 406:	9f 5f       	subi	r25, 0xFF	; 255
 408:	c9 f7       	brne	.-14     	; 0x3fc <__divsf3_pse+0x78>
 40a:	88 0f       	add	r24, r24
 40c:	91 1d       	adc	r25, r1
 40e:	96 95       	lsr	r25
 410:	87 95       	ror	r24
 412:	97 f9       	bld	r25, 7
 414:	08 95       	ret
 416:	e1 e0       	ldi	r30, 0x01	; 1
 418:	66 0f       	add	r22, r22
 41a:	77 1f       	adc	r23, r23
 41c:	88 1f       	adc	r24, r24
 41e:	bb 1f       	adc	r27, r27
 420:	62 17       	cp	r22, r18
 422:	73 07       	cpc	r23, r19
 424:	84 07       	cpc	r24, r20
 426:	ba 07       	cpc	r27, r26
 428:	20 f0       	brcs	.+8      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 42a:	62 1b       	sub	r22, r18
 42c:	73 0b       	sbc	r23, r19
 42e:	84 0b       	sbc	r24, r20
 430:	ba 0b       	sbc	r27, r26
 432:	ee 1f       	adc	r30, r30
 434:	88 f7       	brcc	.-30     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 436:	e0 95       	com	r30
 438:	08 95       	ret

0000043a <__fixunssfsi>:
 43a:	0e 94 b9 02 	call	0x572	; 0x572 <__fp_splitA>
 43e:	88 f0       	brcs	.+34     	; 0x462 <__fixunssfsi+0x28>
 440:	9f 57       	subi	r25, 0x7F	; 127
 442:	98 f0       	brcs	.+38     	; 0x46a <__fixunssfsi+0x30>
 444:	b9 2f       	mov	r27, r25
 446:	99 27       	eor	r25, r25
 448:	b7 51       	subi	r27, 0x17	; 23
 44a:	b0 f0       	brcs	.+44     	; 0x478 <__fixunssfsi+0x3e>
 44c:	e1 f0       	breq	.+56     	; 0x486 <__fixunssfsi+0x4c>
 44e:	66 0f       	add	r22, r22
 450:	77 1f       	adc	r23, r23
 452:	88 1f       	adc	r24, r24
 454:	99 1f       	adc	r25, r25
 456:	1a f0       	brmi	.+6      	; 0x45e <__fixunssfsi+0x24>
 458:	ba 95       	dec	r27
 45a:	c9 f7       	brne	.-14     	; 0x44e <__fixunssfsi+0x14>
 45c:	14 c0       	rjmp	.+40     	; 0x486 <__fixunssfsi+0x4c>
 45e:	b1 30       	cpi	r27, 0x01	; 1
 460:	91 f0       	breq	.+36     	; 0x486 <__fixunssfsi+0x4c>
 462:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <__fp_zero>
 466:	b1 e0       	ldi	r27, 0x01	; 1
 468:	08 95       	ret
 46a:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__fp_zero>
 46e:	67 2f       	mov	r22, r23
 470:	78 2f       	mov	r23, r24
 472:	88 27       	eor	r24, r24
 474:	b8 5f       	subi	r27, 0xF8	; 248
 476:	39 f0       	breq	.+14     	; 0x486 <__fixunssfsi+0x4c>
 478:	b9 3f       	cpi	r27, 0xF9	; 249
 47a:	cc f3       	brlt	.-14     	; 0x46e <__fixunssfsi+0x34>
 47c:	86 95       	lsr	r24
 47e:	77 95       	ror	r23
 480:	67 95       	ror	r22
 482:	b3 95       	inc	r27
 484:	d9 f7       	brne	.-10     	; 0x47c <__fixunssfsi+0x42>
 486:	3e f4       	brtc	.+14     	; 0x496 <__fixunssfsi+0x5c>
 488:	90 95       	com	r25
 48a:	80 95       	com	r24
 48c:	70 95       	com	r23
 48e:	61 95       	neg	r22
 490:	7f 4f       	sbci	r23, 0xFF	; 255
 492:	8f 4f       	sbci	r24, 0xFF	; 255
 494:	9f 4f       	sbci	r25, 0xFF	; 255
 496:	08 95       	ret

00000498 <__floatunsisf>:
 498:	e8 94       	clt
 49a:	09 c0       	rjmp	.+18     	; 0x4ae <__floatsisf+0x12>

0000049c <__floatsisf>:
 49c:	97 fb       	bst	r25, 7
 49e:	3e f4       	brtc	.+14     	; 0x4ae <__floatsisf+0x12>
 4a0:	90 95       	com	r25
 4a2:	80 95       	com	r24
 4a4:	70 95       	com	r23
 4a6:	61 95       	neg	r22
 4a8:	7f 4f       	sbci	r23, 0xFF	; 255
 4aa:	8f 4f       	sbci	r24, 0xFF	; 255
 4ac:	9f 4f       	sbci	r25, 0xFF	; 255
 4ae:	99 23       	and	r25, r25
 4b0:	a9 f0       	breq	.+42     	; 0x4dc <__floatsisf+0x40>
 4b2:	f9 2f       	mov	r31, r25
 4b4:	96 e9       	ldi	r25, 0x96	; 150
 4b6:	bb 27       	eor	r27, r27
 4b8:	93 95       	inc	r25
 4ba:	f6 95       	lsr	r31
 4bc:	87 95       	ror	r24
 4be:	77 95       	ror	r23
 4c0:	67 95       	ror	r22
 4c2:	b7 95       	ror	r27
 4c4:	f1 11       	cpse	r31, r1
 4c6:	f8 cf       	rjmp	.-16     	; 0x4b8 <__floatsisf+0x1c>
 4c8:	fa f4       	brpl	.+62     	; 0x508 <__floatsisf+0x6c>
 4ca:	bb 0f       	add	r27, r27
 4cc:	11 f4       	brne	.+4      	; 0x4d2 <__floatsisf+0x36>
 4ce:	60 ff       	sbrs	r22, 0
 4d0:	1b c0       	rjmp	.+54     	; 0x508 <__floatsisf+0x6c>
 4d2:	6f 5f       	subi	r22, 0xFF	; 255
 4d4:	7f 4f       	sbci	r23, 0xFF	; 255
 4d6:	8f 4f       	sbci	r24, 0xFF	; 255
 4d8:	9f 4f       	sbci	r25, 0xFF	; 255
 4da:	16 c0       	rjmp	.+44     	; 0x508 <__floatsisf+0x6c>
 4dc:	88 23       	and	r24, r24
 4de:	11 f0       	breq	.+4      	; 0x4e4 <__floatsisf+0x48>
 4e0:	96 e9       	ldi	r25, 0x96	; 150
 4e2:	11 c0       	rjmp	.+34     	; 0x506 <__floatsisf+0x6a>
 4e4:	77 23       	and	r23, r23
 4e6:	21 f0       	breq	.+8      	; 0x4f0 <__floatsisf+0x54>
 4e8:	9e e8       	ldi	r25, 0x8E	; 142
 4ea:	87 2f       	mov	r24, r23
 4ec:	76 2f       	mov	r23, r22
 4ee:	05 c0       	rjmp	.+10     	; 0x4fa <__floatsisf+0x5e>
 4f0:	66 23       	and	r22, r22
 4f2:	71 f0       	breq	.+28     	; 0x510 <__floatsisf+0x74>
 4f4:	96 e8       	ldi	r25, 0x86	; 134
 4f6:	86 2f       	mov	r24, r22
 4f8:	70 e0       	ldi	r23, 0x00	; 0
 4fa:	60 e0       	ldi	r22, 0x00	; 0
 4fc:	2a f0       	brmi	.+10     	; 0x508 <__floatsisf+0x6c>
 4fe:	9a 95       	dec	r25
 500:	66 0f       	add	r22, r22
 502:	77 1f       	adc	r23, r23
 504:	88 1f       	adc	r24, r24
 506:	da f7       	brpl	.-10     	; 0x4fe <__floatsisf+0x62>
 508:	88 0f       	add	r24, r24
 50a:	96 95       	lsr	r25
 50c:	87 95       	ror	r24
 50e:	97 f9       	bld	r25, 7
 510:	08 95       	ret

00000512 <__fp_inf>:
 512:	97 f9       	bld	r25, 7
 514:	9f 67       	ori	r25, 0x7F	; 127
 516:	80 e8       	ldi	r24, 0x80	; 128
 518:	70 e0       	ldi	r23, 0x00	; 0
 51a:	60 e0       	ldi	r22, 0x00	; 0
 51c:	08 95       	ret

0000051e <__fp_nan>:
 51e:	9f ef       	ldi	r25, 0xFF	; 255
 520:	80 ec       	ldi	r24, 0xC0	; 192
 522:	08 95       	ret

00000524 <__fp_pscA>:
 524:	00 24       	eor	r0, r0
 526:	0a 94       	dec	r0
 528:	16 16       	cp	r1, r22
 52a:	17 06       	cpc	r1, r23
 52c:	18 06       	cpc	r1, r24
 52e:	09 06       	cpc	r0, r25
 530:	08 95       	ret

00000532 <__fp_pscB>:
 532:	00 24       	eor	r0, r0
 534:	0a 94       	dec	r0
 536:	12 16       	cp	r1, r18
 538:	13 06       	cpc	r1, r19
 53a:	14 06       	cpc	r1, r20
 53c:	05 06       	cpc	r0, r21
 53e:	08 95       	ret

00000540 <__fp_round>:
 540:	09 2e       	mov	r0, r25
 542:	03 94       	inc	r0
 544:	00 0c       	add	r0, r0
 546:	11 f4       	brne	.+4      	; 0x54c <__fp_round+0xc>
 548:	88 23       	and	r24, r24
 54a:	52 f0       	brmi	.+20     	; 0x560 <__fp_round+0x20>
 54c:	bb 0f       	add	r27, r27
 54e:	40 f4       	brcc	.+16     	; 0x560 <__fp_round+0x20>
 550:	bf 2b       	or	r27, r31
 552:	11 f4       	brne	.+4      	; 0x558 <__fp_round+0x18>
 554:	60 ff       	sbrs	r22, 0
 556:	04 c0       	rjmp	.+8      	; 0x560 <__fp_round+0x20>
 558:	6f 5f       	subi	r22, 0xFF	; 255
 55a:	7f 4f       	sbci	r23, 0xFF	; 255
 55c:	8f 4f       	sbci	r24, 0xFF	; 255
 55e:	9f 4f       	sbci	r25, 0xFF	; 255
 560:	08 95       	ret

00000562 <__fp_split3>:
 562:	57 fd       	sbrc	r21, 7
 564:	90 58       	subi	r25, 0x80	; 128
 566:	44 0f       	add	r20, r20
 568:	55 1f       	adc	r21, r21
 56a:	59 f0       	breq	.+22     	; 0x582 <__fp_splitA+0x10>
 56c:	5f 3f       	cpi	r21, 0xFF	; 255
 56e:	71 f0       	breq	.+28     	; 0x58c <__fp_splitA+0x1a>
 570:	47 95       	ror	r20

00000572 <__fp_splitA>:
 572:	88 0f       	add	r24, r24
 574:	97 fb       	bst	r25, 7
 576:	99 1f       	adc	r25, r25
 578:	61 f0       	breq	.+24     	; 0x592 <__fp_splitA+0x20>
 57a:	9f 3f       	cpi	r25, 0xFF	; 255
 57c:	79 f0       	breq	.+30     	; 0x59c <__fp_splitA+0x2a>
 57e:	87 95       	ror	r24
 580:	08 95       	ret
 582:	12 16       	cp	r1, r18
 584:	13 06       	cpc	r1, r19
 586:	14 06       	cpc	r1, r20
 588:	55 1f       	adc	r21, r21
 58a:	f2 cf       	rjmp	.-28     	; 0x570 <__fp_split3+0xe>
 58c:	46 95       	lsr	r20
 58e:	f1 df       	rcall	.-30     	; 0x572 <__fp_splitA>
 590:	08 c0       	rjmp	.+16     	; 0x5a2 <__fp_splitA+0x30>
 592:	16 16       	cp	r1, r22
 594:	17 06       	cpc	r1, r23
 596:	18 06       	cpc	r1, r24
 598:	99 1f       	adc	r25, r25
 59a:	f1 cf       	rjmp	.-30     	; 0x57e <__fp_splitA+0xc>
 59c:	86 95       	lsr	r24
 59e:	71 05       	cpc	r23, r1
 5a0:	61 05       	cpc	r22, r1
 5a2:	08 94       	sec
 5a4:	08 95       	ret

000005a6 <__fp_zero>:
 5a6:	e8 94       	clt

000005a8 <__fp_szero>:
 5a8:	bb 27       	eor	r27, r27
 5aa:	66 27       	eor	r22, r22
 5ac:	77 27       	eor	r23, r23
 5ae:	cb 01       	movw	r24, r22
 5b0:	97 f9       	bld	r25, 7
 5b2:	08 95       	ret

000005b4 <_exit>:
 5b4:	f8 94       	cli

000005b6 <__stop_program>:
 5b6:	ff cf       	rjmp	.-2      	; 0x5b6 <__stop_program>
