
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000040a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000396  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800100  00800100  0000040a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000040a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000043c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  0000047c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c7f  00000000  00000000  0000057c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000928  00000000  00000000  000011fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000079d  00000000  00000000  00001b23  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000230  00000000  00000000  000022c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004e0  00000000  00000000  000024f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002e6  00000000  00000000  000029d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00002cb6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 df 00 	jmp	0x1be	; 0x1be <__vector_1>
   8:	0c 94 0b 01 	jmp	0x216	; 0x216 <__vector_2>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ab 30       	cpi	r26, 0x0B	; 11
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 a4 00 	call	0x148	; 0x148 <main>
  88:	0c 94 c9 01 	jmp	0x392	; 0x392 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <init_ADC>:
 */ 
#include "ADC.h"

void init_ADC(void)
{
	ADMUX |= (1 << REFS0);  // Set reference to AVCC
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	80 64       	ori	r24, 0x40	; 64
  98:	80 83       	st	Z, r24
	ADMUX &= ~(1 << REFS1); // Clear REFS1 bit
  9a:	80 81       	ld	r24, Z
  9c:	8f 77       	andi	r24, 0x7F	; 127
  9e:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);  // Enable the ADC
  a0:	ea e7       	ldi	r30, 0x7A	; 122
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 81       	ld	r24, Z
  a6:	80 68       	ori	r24, 0x80	; 128
  a8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2); // Set prescaler to 128
  aa:	80 81       	ld	r24, Z
  ac:	87 60       	ori	r24, 0x07	; 7
  ae:	80 83       	st	Z, r24
  b0:	08 95       	ret

000000b2 <ADC_read>:
}

uint16_t ADC_read(uint8_t channel)
{
	ADMUX = (ADMUX & 0xF0) | (channel & 0x0F); // Clear older channel, set new channel
  b2:	ec e7       	ldi	r30, 0x7C	; 124
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	90 81       	ld	r25, Z
  b8:	90 7f       	andi	r25, 0xF0	; 240
  ba:	8f 70       	andi	r24, 0x0F	; 15
  bc:	89 2b       	or	r24, r25
  be:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);  // Start new conversion
  c0:	ea e7       	ldi	r30, 0x7A	; 122
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	80 64       	ori	r24, 0x40	; 64
  c8:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC)); // Wait until conversion ends
  ca:	80 81       	ld	r24, Z
  cc:	86 fd       	sbrc	r24, 6
  ce:	fd cf       	rjmp	.-6      	; 0xca <ADC_read+0x18>
	return ADCW;  // Return the 10-bit ADC value
  d0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
  d4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
  d8:	08 95       	ret

000000da <init_ExternalInterrupts>:
#include "ext_interrupt.h"

void init_ExternalInterrupts(void)
{
	// Configure INT0 and INT1 for both rising and falling edges
	EICRA |= (1 << ISC00) | (1 << ISC10);  // INT0 and INT1 trigger on any change
  da:	e9 e6       	ldi	r30, 0x69	; 105
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	85 60       	ori	r24, 0x05	; 5
  e2:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0) | (1 << INT1);    // Enable INT0 and INT1 interrupts
  e4:	8d b3       	in	r24, 0x1d	; 29
  e6:	83 60       	ori	r24, 0x03	; 3
  e8:	8d bb       	out	0x1d, r24	; 29
  ea:	08 95       	ret

000000ec <init_GPIO>:
 */ 
#include "GPIO.h"

void init_GPIO(void)
{
	DDRD |= (1 << DDD0) | (1 << DDD1) | (1 << DDD6); // Set pins PD0, PD1, and PD6 as output
  ec:	8a b1       	in	r24, 0x0a	; 10
  ee:	83 64       	ori	r24, 0x43	; 67
  f0:	8a b9       	out	0x0a, r24	; 10
	DDRC &= ~(1 << DDC0); // Set pin PC0 as input (ADC channel 0)
  f2:	38 98       	cbi	0x07, 0	; 7

	// Configure encoder pins as inputs
	DDRD &= ~((1 << DDD2) | (1 << DDD3)); // Assuming A and B channels are on PD2 and PD3
  f4:	8a b1       	in	r24, 0x0a	; 10
  f6:	83 7f       	andi	r24, 0xF3	; 243
  f8:	8a b9       	out	0x0a, r24	; 10

	// Set SS pin as output
	DDRB |= (1 << DDB2);  // Ensure SS pin is set as output
  fa:	22 9a       	sbi	0x04, 2	; 4
	PORTB |= (1 << PORTB2); // Set SS pin high (deselect slave)
  fc:	2a 9a       	sbi	0x05, 2	; 5
  fe:	08 95       	ret

00000100 <setMotorSpeed>:
}

void setMotorSpeed(uint8_t dutyCycle)
{
	PORTD |= (1 << PORTD0);  // Set pin PD0 high (motor forward direction)
 100:	58 9a       	sbi	0x0b, 0	; 11
	PORTD &= ~(1 << PORTD1); // Set pin PD1 low
 102:	59 98       	cbi	0x0b, 1	; 11
	OCR0A = dutyCycle;  // Set PWM duty cycle to control motor speed
 104:	87 bd       	out	0x27, r24	; 39
 106:	08 95       	ret

00000108 <update_encoder_count>:

#define PPR 24  // Pulses per revolution, replace with your encoder's PPR

void update_encoder_count(uint8_t currentA, uint8_t currentB)
{
	if (currentA != lastA) {
 108:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <lastA>
 10c:	98 17       	cp	r25, r24
 10e:	b9 f0       	breq	.+46     	; 0x13e <update_encoder_count+0x36>
		if (currentB != currentA) {
 110:	86 17       	cp	r24, r22
 112:	59 f0       	breq	.+22     	; 0x12a <update_encoder_count+0x22>
			pulse_count++;  // Clockwise
 114:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <pulse_count>
 118:	30 91 0a 01 	lds	r19, 0x010A	; 0x80010a <pulse_count+0x1>
 11c:	2f 5f       	subi	r18, 0xFF	; 255
 11e:	3f 4f       	sbci	r19, 0xFF	; 255
 120:	30 93 0a 01 	sts	0x010A, r19	; 0x80010a <pulse_count+0x1>
 124:	20 93 09 01 	sts	0x0109, r18	; 0x800109 <pulse_count>
 128:	0a c0       	rjmp	.+20     	; 0x13e <update_encoder_count+0x36>
			} else {
			pulse_count--;  // Counterclockwise
 12a:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <pulse_count>
 12e:	30 91 0a 01 	lds	r19, 0x010A	; 0x80010a <pulse_count+0x1>
 132:	21 50       	subi	r18, 0x01	; 1
 134:	31 09       	sbc	r19, r1
 136:	30 93 0a 01 	sts	0x010A, r19	; 0x80010a <pulse_count+0x1>
 13a:	20 93 09 01 	sts	0x0109, r18	; 0x800109 <pulse_count>
		}
	}
	lastA = currentA;
 13e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <lastA>
	lastB = currentB;
 142:	60 93 07 01 	sts	0x0107, r22	; 0x800107 <lastB>
 146:	08 95       	ret

00000148 <main>:
}

int main(void)
{
	init_GPIO();
 148:	0e 94 76 00 	call	0xec	; 0xec <init_GPIO>
	init_ADC();
 14c:	0e 94 48 00 	call	0x90	; 0x90 <init_ADC>
	init_PWM();
 150:	0e 94 83 01 	call	0x306	; 0x306 <init_PWM>
	init_ExternalInterrupts();
 154:	0e 94 6d 00 	call	0xda	; 0xda <init_ExternalInterrupts>
	init_Timer1();
 158:	0e 94 8d 01 	call	0x31a	; 0x31a <init_Timer1>
	init_SPI();
 15c:	0e 94 76 01 	call	0x2ec	; 0x2ec <init_SPI>

	sei();  // Enable global interrupts
 160:	78 94       	sei

	while (1)
	{
		adc_value = ADC_read(0);  // Read ADC value from channel 0 (potentiometer)
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	0e 94 59 00 	call	0xb2	; 0xb2 <ADC_read>
 168:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <adc_value+0x1>
 16c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <adc_value>

		// Only update PWM if ADC value has changed significantly
		if (abs(adc_value - last_adc_value) > 4) {
 170:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <last_adc_value>
 174:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <last_adc_value+0x1>
 178:	ac 01       	movw	r20, r24
 17a:	42 1b       	sub	r20, r18
 17c:	53 0b       	sbc	r21, r19
 17e:	9a 01       	movw	r18, r20
 180:	22 f4       	brpl	.+8      	; 0x18a <main+0x42>
 182:	22 27       	eor	r18, r18
 184:	33 27       	eor	r19, r19
 186:	24 1b       	sub	r18, r20
 188:	35 0b       	sbc	r19, r21
 18a:	25 30       	cpi	r18, 0x05	; 5
 18c:	31 05       	cpc	r19, r1
 18e:	84 f0       	brlt	.+32     	; 0x1b0 <main+0x68>
			dutyCycle = adc_value / 4;  // Scale 1023 to 255
 190:	96 95       	lsr	r25
 192:	87 95       	ror	r24
 194:	96 95       	lsr	r25
 196:	87 95       	ror	r24
 198:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <dutyCycle>
			setMotorSpeed(dutyCycle);   // Update motor speed
 19c:	0e 94 80 00 	call	0x100	; 0x100 <setMotorSpeed>
			last_adc_value = adc_value; // Store the last ADC value
 1a0:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <adc_value>
 1a4:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <adc_value+0x1>
 1a8:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <last_adc_value+0x1>
 1ac:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <last_adc_value>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b0:	8f e1       	ldi	r24, 0x1F	; 31
 1b2:	9e e4       	ldi	r25, 0x4E	; 78
 1b4:	01 97       	sbiw	r24, 0x01	; 1
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <main+0x6c>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <main+0x72>
 1ba:	00 00       	nop
 1bc:	d2 cf       	rjmp	.-92     	; 0x162 <main+0x1a>

000001be <__vector_1>:
		_delay_ms(10);
	}
}

ISR(INT0_vect)
{
 1be:	1f 92       	push	r1
 1c0:	0f 92       	push	r0
 1c2:	0f b6       	in	r0, 0x3f	; 63
 1c4:	0f 92       	push	r0
 1c6:	11 24       	eor	r1, r1
 1c8:	2f 93       	push	r18
 1ca:	3f 93       	push	r19
 1cc:	4f 93       	push	r20
 1ce:	5f 93       	push	r21
 1d0:	6f 93       	push	r22
 1d2:	7f 93       	push	r23
 1d4:	8f 93       	push	r24
 1d6:	9f 93       	push	r25
 1d8:	af 93       	push	r26
 1da:	bf 93       	push	r27
 1dc:	ef 93       	push	r30
 1de:	ff 93       	push	r31
	uint8_t currentA = (PIND & (1 << PIND2)) >> PIND2;  // Read the state of A channel
 1e0:	89 b1       	in	r24, 0x09	; 9
	uint8_t currentB = (PIND & (1 << PIND3)) >> PIND3;  // Read the state of B channel
 1e2:	69 b1       	in	r22, 0x09	; 9
	update_encoder_count(currentA, currentB);
 1e4:	63 fb       	bst	r22, 3
 1e6:	66 27       	eor	r22, r22
 1e8:	60 f9       	bld	r22, 0
 1ea:	82 fb       	bst	r24, 2
 1ec:	88 27       	eor	r24, r24
 1ee:	80 f9       	bld	r24, 0
 1f0:	0e 94 84 00 	call	0x108	; 0x108 <update_encoder_count>
}
 1f4:	ff 91       	pop	r31
 1f6:	ef 91       	pop	r30
 1f8:	bf 91       	pop	r27
 1fa:	af 91       	pop	r26
 1fc:	9f 91       	pop	r25
 1fe:	8f 91       	pop	r24
 200:	7f 91       	pop	r23
 202:	6f 91       	pop	r22
 204:	5f 91       	pop	r21
 206:	4f 91       	pop	r20
 208:	3f 91       	pop	r19
 20a:	2f 91       	pop	r18
 20c:	0f 90       	pop	r0
 20e:	0f be       	out	0x3f, r0	; 63
 210:	0f 90       	pop	r0
 212:	1f 90       	pop	r1
 214:	18 95       	reti

00000216 <__vector_2>:

ISR(INT1_vect)
{
 216:	1f 92       	push	r1
 218:	0f 92       	push	r0
 21a:	0f b6       	in	r0, 0x3f	; 63
 21c:	0f 92       	push	r0
 21e:	11 24       	eor	r1, r1
 220:	2f 93       	push	r18
 222:	3f 93       	push	r19
 224:	4f 93       	push	r20
 226:	5f 93       	push	r21
 228:	6f 93       	push	r22
 22a:	7f 93       	push	r23
 22c:	8f 93       	push	r24
 22e:	9f 93       	push	r25
 230:	af 93       	push	r26
 232:	bf 93       	push	r27
 234:	ef 93       	push	r30
 236:	ff 93       	push	r31
	uint8_t currentA = (PIND & (1 << PIND2)) >> PIND2;  // Read the state of A channel
 238:	89 b1       	in	r24, 0x09	; 9
	uint8_t currentB = (PIND & (1 << PIND3)) >> PIND3;  // Read the state of B channel
 23a:	69 b1       	in	r22, 0x09	; 9
	update_encoder_count(currentA, currentB);
 23c:	63 fb       	bst	r22, 3
 23e:	66 27       	eor	r22, r22
 240:	60 f9       	bld	r22, 0
 242:	82 fb       	bst	r24, 2
 244:	88 27       	eor	r24, r24
 246:	80 f9       	bld	r24, 0
 248:	0e 94 84 00 	call	0x108	; 0x108 <update_encoder_count>
}
 24c:	ff 91       	pop	r31
 24e:	ef 91       	pop	r30
 250:	bf 91       	pop	r27
 252:	af 91       	pop	r26
 254:	9f 91       	pop	r25
 256:	8f 91       	pop	r24
 258:	7f 91       	pop	r23
 25a:	6f 91       	pop	r22
 25c:	5f 91       	pop	r21
 25e:	4f 91       	pop	r20
 260:	3f 91       	pop	r19
 262:	2f 91       	pop	r18
 264:	0f 90       	pop	r0
 266:	0f be       	out	0x3f, r0	; 63
 268:	0f 90       	pop	r0
 26a:	1f 90       	pop	r1
 26c:	18 95       	reti

0000026e <__vector_11>:

ISR(TIMER1_COMPA_vect)
{
 26e:	1f 92       	push	r1
 270:	0f 92       	push	r0
 272:	0f b6       	in	r0, 0x3f	; 63
 274:	0f 92       	push	r0
 276:	11 24       	eor	r1, r1
 278:	2f 93       	push	r18
 27a:	3f 93       	push	r19
 27c:	4f 93       	push	r20
 27e:	5f 93       	push	r21
 280:	6f 93       	push	r22
 282:	7f 93       	push	r23
 284:	8f 93       	push	r24
 286:	9f 93       	push	r25
 288:	af 93       	push	r26
 28a:	bf 93       	push	r27
 28c:	ef 93       	push	r30
 28e:	ff 93       	push	r31
	rpm = (pulse_count * 60) / (PPR);  // Calculate RPM
 290:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <pulse_count>
 294:	30 91 0a 01 	lds	r19, 0x010A	; 0x80010a <pulse_count+0x1>
 298:	4c e3       	ldi	r20, 0x3C	; 60
 29a:	42 9f       	mul	r20, r18
 29c:	c0 01       	movw	r24, r0
 29e:	43 9f       	mul	r20, r19
 2a0:	90 0d       	add	r25, r0
 2a2:	11 24       	eor	r1, r1
 2a4:	68 e1       	ldi	r22, 0x18	; 24
 2a6:	70 e0       	ldi	r23, 0x00	; 0
 2a8:	0e 94 a1 01 	call	0x342	; 0x342 <__divmodhi4>
 2ac:	87 2f       	mov	r24, r23
 2ae:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <_edata>
 2b2:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <_edata+0x1>
	pulse_count = 0;  // Reset pulse count for the next interval
 2b6:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <pulse_count+0x1>
 2ba:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <pulse_count>

	// Split the RPM into two bytes and send via SPI
	SPI_send((rpm >> 8) & 0xFF);  // Send the high byte
 2be:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <SPI_send>
	SPI_send(rpm & 0xFF);         // Send the low byte
 2c2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 2c6:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <SPI_send>
}
 2ca:	ff 91       	pop	r31
 2cc:	ef 91       	pop	r30
 2ce:	bf 91       	pop	r27
 2d0:	af 91       	pop	r26
 2d2:	9f 91       	pop	r25
 2d4:	8f 91       	pop	r24
 2d6:	7f 91       	pop	r23
 2d8:	6f 91       	pop	r22
 2da:	5f 91       	pop	r21
 2dc:	4f 91       	pop	r20
 2de:	3f 91       	pop	r19
 2e0:	2f 91       	pop	r18
 2e2:	0f 90       	pop	r0
 2e4:	0f be       	out	0x3f, r0	; 63
 2e6:	0f 90       	pop	r0
 2e8:	1f 90       	pop	r1
 2ea:	18 95       	reti

000002ec <init_SPI>:
#include "spi.h"

void init_SPI(void)
{
	// Set MOSI, SCK, and SS as output, MISO as input
	DDRB = (1 << DDB3) | (1 << DDB5) | (1 << DDB2);
 2ec:	8c e2       	ldi	r24, 0x2C	; 44
 2ee:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << PORTB2); // Set SS high initially
 2f0:	2a 9a       	sbi	0x05, 2	; 5

	// Enable SPI, set as Master, and set clock rate fck/16
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR0);
 2f2:	81 e5       	ldi	r24, 0x51	; 81
 2f4:	8c bd       	out	0x2c, r24	; 44
 2f6:	08 95       	ret

000002f8 <SPI_send>:
}

void SPI_send(uint8_t data)
{
	PORTB &= ~(1 << PORTB2); // Assert SS (Select slave)
 2f8:	2a 98       	cbi	0x05, 2	; 5
	SPDR = data;             // Start transmission
 2fa:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1 << SPIF))); // Wait for transmission to complete
 2fc:	0d b4       	in	r0, 0x2d	; 45
 2fe:	07 fe       	sbrs	r0, 7
 300:	fd cf       	rjmp	.-6      	; 0x2fc <SPI_send+0x4>
	PORTB |= (1 << PORTB2);  // Deassert SS (Deselect slave)
 302:	2a 9a       	sbi	0x05, 2	; 5
 304:	08 95       	ret

00000306 <init_PWM>:
#include "timer.h"


void init_PWM(void)
{
	DDRD |= (1 << DDD6); // Set PD6 as output (PWM)
 306:	56 9a       	sbi	0x0a, 6	; 10
	TCCR0A |= (1 << COM0A1) | (1 << WGM00) | (1 << WGM01); // Fast PWM mode, non-inverted
 308:	84 b5       	in	r24, 0x24	; 36
 30a:	83 68       	ori	r24, 0x83	; 131
 30c:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS22); // Prescaler 64
 30e:	85 b5       	in	r24, 0x25	; 37
 310:	84 60       	ori	r24, 0x04	; 4
 312:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0;
 314:	16 bc       	out	0x26, r1	; 38
	OCR0A = 0;  // Initialize PWM duty cycle to 0
 316:	17 bc       	out	0x27, r1	; 39
 318:	08 95       	ret

0000031a <init_Timer1>:
}

void init_Timer1(void)
{
	TCCR1B |= (1 << WGM12);  // Configure Timer1 in CTC mode
 31a:	e1 e8       	ldi	r30, 0x81	; 129
 31c:	f0 e0       	ldi	r31, 0x00	; 0
 31e:	80 81       	ld	r24, Z
 320:	88 60       	ori	r24, 0x08	; 8
 322:	80 83       	st	Z, r24
	OCR1A = 7812;  // Set compare value for 1-second interval
 324:	84 e8       	ldi	r24, 0x84	; 132
 326:	9e e1       	ldi	r25, 0x1E	; 30
 328:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 32c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	TCCR1B |= (1 << CS12) | (1 << CS10);  // Prescaler 1024
 330:	80 81       	ld	r24, Z
 332:	85 60       	ori	r24, 0x05	; 5
 334:	80 83       	st	Z, r24
	TIMSK1 |= (1 << OCIE1A); // Enable Timer1 compare match interrupt
 336:	ef e6       	ldi	r30, 0x6F	; 111
 338:	f0 e0       	ldi	r31, 0x00	; 0
 33a:	80 81       	ld	r24, Z
 33c:	82 60       	ori	r24, 0x02	; 2
 33e:	80 83       	st	Z, r24
 340:	08 95       	ret

00000342 <__divmodhi4>:
 342:	97 fb       	bst	r25, 7
 344:	07 2e       	mov	r0, r23
 346:	16 f4       	brtc	.+4      	; 0x34c <__divmodhi4+0xa>
 348:	00 94       	com	r0
 34a:	07 d0       	rcall	.+14     	; 0x35a <__divmodhi4_neg1>
 34c:	77 fd       	sbrc	r23, 7
 34e:	09 d0       	rcall	.+18     	; 0x362 <__divmodhi4_neg2>
 350:	0e 94 b5 01 	call	0x36a	; 0x36a <__udivmodhi4>
 354:	07 fc       	sbrc	r0, 7
 356:	05 d0       	rcall	.+10     	; 0x362 <__divmodhi4_neg2>
 358:	3e f4       	brtc	.+14     	; 0x368 <__divmodhi4_exit>

0000035a <__divmodhi4_neg1>:
 35a:	90 95       	com	r25
 35c:	81 95       	neg	r24
 35e:	9f 4f       	sbci	r25, 0xFF	; 255
 360:	08 95       	ret

00000362 <__divmodhi4_neg2>:
 362:	70 95       	com	r23
 364:	61 95       	neg	r22
 366:	7f 4f       	sbci	r23, 0xFF	; 255

00000368 <__divmodhi4_exit>:
 368:	08 95       	ret

0000036a <__udivmodhi4>:
 36a:	aa 1b       	sub	r26, r26
 36c:	bb 1b       	sub	r27, r27
 36e:	51 e1       	ldi	r21, 0x11	; 17
 370:	07 c0       	rjmp	.+14     	; 0x380 <__udivmodhi4_ep>

00000372 <__udivmodhi4_loop>:
 372:	aa 1f       	adc	r26, r26
 374:	bb 1f       	adc	r27, r27
 376:	a6 17       	cp	r26, r22
 378:	b7 07       	cpc	r27, r23
 37a:	10 f0       	brcs	.+4      	; 0x380 <__udivmodhi4_ep>
 37c:	a6 1b       	sub	r26, r22
 37e:	b7 0b       	sbc	r27, r23

00000380 <__udivmodhi4_ep>:
 380:	88 1f       	adc	r24, r24
 382:	99 1f       	adc	r25, r25
 384:	5a 95       	dec	r21
 386:	a9 f7       	brne	.-22     	; 0x372 <__udivmodhi4_loop>
 388:	80 95       	com	r24
 38a:	90 95       	com	r25
 38c:	bc 01       	movw	r22, r24
 38e:	cd 01       	movw	r24, r26
 390:	08 95       	ret

00000392 <_exit>:
 392:	f8 94       	cli

00000394 <__stop_program>:
 394:	ff cf       	rjmp	.-2      	; 0x394 <__stop_program>
